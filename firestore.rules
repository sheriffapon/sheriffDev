/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It assumes an open data model where anyone can read projects and reviews, but no user data is present.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project information.
 * - /reviews/{reviewId}: Stores reviews.
 *
 * Key Security Decisions:
 * - Public Read Access: Both 'projects' and 'reviews' collections are publicly readable.
 * - No User Ownership: The data model currently lacks user-specific ownership or roles. Therefore, writes are globally disabled.
 * - Write Restrictions: Due to the absence of user ownership, all write operations (create, update, delete) are denied. This ensures that only administrators with direct database access can modify data during the prototype phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to the 'projects' collection. Writes are disabled.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project data.
     * @deny (create, update, delete): No user can create, update, or delete projects.
     * @principle Allows public read access for prototyping, but restricts write access due to the lack of user ownership in the data model.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants public read access to the 'reviews' collection. Writes are disabled.
     * @path /reviews/{reviewId}
     * @allow (get, list): Any user can read review data.
     * @deny (create, update, delete): No user can create, update, or delete reviews.
     * @principle Allows public read access for prototyping, but restricts write access due to the lack of user ownership in the data model.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}