/**
 * @fileoverview Firestore Security Rules for the portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes public read access to project and review data while restricting write access.
 * Any authenticated user can create, update, and delete reviews.
 * Any authenticated user can create, update, and delete projects.
 *
 * Data Structure:
 * The data is stored in two top-level collections: 'projects' and 'reviews'.
 * /projects/{projectId}: Stores project details.
 * /reviews/{reviewId}: Stores reviews.
 *
 * Key Security Decisions:
 * - Projects and Reviews are publicly readable, but write operations are restricted.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to projects, but restricts write access to authenticated users.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read project details.
     * @allow (create, update, delete) Any authenticated user can modify project details.
     * @deny (create, update, delete) Unauthenticated users cannot modify project details.
     * @principle Allows public reads, but restricts writes to authenticated users.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Allows public read access to reviews, but restricts write access to authenticated users.
     * @path /reviews/{reviewId}
     * @allow (get, list) Any user can read reviews.
     * @allow (create, update, delete) Any authenticated user can modify reviews.
     * @deny (create, update, delete) Unauthenticated users cannot modify reviews.
     * @principle Allows public reads, but restricts writes to authenticated users.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}