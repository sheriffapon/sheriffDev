/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It assumes a public-read, owner-write model for simplicity, but it will be upgraded to granular permissions later.
 *
 * Data Structure:
 * The Firestore database contains two top-level collections: 'projects' and 'reviews'.
 * - /projects/{projectId}: Stores project information.
 * - /reviews/{reviewId}: Stores user reviews.
 *
 * Key Security Decisions:
 * - Public Read: All documents in both collections are publicly readable to facilitate discovery.
 * - Owner-Only Writes: Creation, updates, and deletions are restricted to authenticated users.
 * - No User Listing: Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * The rules assume that the 'Review' entity will be updated to include an 'authorId' field, which
 * will store the UID of the user who created the review.  This is necessary to enforce owner-only
 * write access.
 *
 * Structural Segregation:
 * There is no segregation between public and private content in this initial prototype. Both collections
 * are treated as public-read with protected writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read projects, but only authenticated users can create, update, or delete them.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read any project.
     * @allow (create): An authenticated user can create a project. The 'authorId' field in the project data must match the user's UID.
     * @allow (update, delete): Only the user who created the project (identified by 'authorId') can update or delete it.
     * @deny (create): An unauthenticated user cannot create a project.
     * @deny (update, delete): A user cannot update or delete a project they did not create.
     * @principle Implements public read, owner-only write access control for projects.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    /**
     * @description Allows anyone to read reviews, but only authenticated users can create, update, or delete them.
     * @path /reviews/{reviewId}
     * @allow (get, list): Any user can read any review.
     * @allow (create): An authenticated user can create a review. The 'authorId' field in the review data must match the user's UID.
     * @allow (update, delete): Only the user who created the review (identified by 'authorId') can update or delete it.
     * @deny (create): An unauthenticated user cannot create a review.
     * @deny (update, delete): A user cannot update or delete a review they did not create.
     * @principle Implements public read, owner-only write access control for reviews.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

  }
}