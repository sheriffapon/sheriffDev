/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It uses a public-read, owner-write model for 'reviews' and assumes public read access for 'projects', but enforces authentication for write operations.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project data. Publicly readable, writeable only by authenticated users.
 * - /reviews/{reviewId}: Stores reviews. Publicly readable, writeable only by authenticated users.
 *
 * Key Security Decisions:
 * - Public Read Access: 'projects' and 'reviews' collections are publicly readable to facilitate easy data display.
 * - Authenticated Writes: Write operations (create, update, delete) on both 'projects' and 'reviews' require user authentication.  Schema validation is skipped.
 * - No User Listing:  Listing users is not permitted.
 *
 * Denormalization for Authorization:
 *  -  Currently not used, but consider adding an `authorId` field to the `reviews` collection in the future to enable more fine-grained access control (e.g., allowing only the author to edit their review).
 *
 * Structural Segregation:
 *  -  Not applicable in this scenario. All data is treated as potentially public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access and authenticated write access to the 'projects' collection.
     * @path /projects/{projectId}
     * @allow (get, list): Anyone can read project data.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete projects.
     * @deny (create, update, delete): Unauthenticated users cannot modify project data.
     * @principle Allows public reads and authenticated writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Grants public read access and authenticated write access to the 'reviews' collection.
     * @path /reviews/{reviewId}
     * @allow (get, list): Anyone can read reviews.
     * @allow (create, update, delete): Only authenticated users can create, update, or delete reviews.
     * @deny (create, update, delete): Unauthenticated users cannot create reviews.
     * @principle Allows public reads and authenticated writes, requiring authentication for all write operations.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn();
    }

    // Define helper functions.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}