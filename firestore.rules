/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It uses a public-read, owner-write model for 'reviews' and secures 'projects' with public read access.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project details.
 * - /reviews/{reviewId}: Stores user reviews.
 *
 * Key Security Decisions:
 * - Reviews: Anyone can read all reviews, but only authenticated users can create them.
 * - Projects: Publicly readable, but no write operations are allowed through the API. Data is managed via the Firebase Console.
 * - No data validation is performed in this prototyping phase, except to validate the author on review creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access to all projects and restricts write access.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project data.
     * @deny (create, update, delete): No user can create, update, or delete project data via the API. This should be managed through the console.
     * @principle Allows public read access to projects while restricting write access for security.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any authenticated user to create a review, but only if they are signed in. Public read access.
     * @path /reviews/{reviewId}
     * @allow (create): An authenticated user can create a review.
     * @allow (get, list): Any user can read reviews.
     * @deny (update, delete): No user can update or delete reviews.
     * @deny (create): An unauthenticated user cannot create a review.
     * @principle Enforces authentication for review creation while allowing public read access.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}