/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization but relaxing data validation.
 * It uses a public-read, owner-write pattern for 'reviews' and requires authentication for all write operations.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project details. Publicly readable.
 * - /reviews/{reviewId}: Stores user reviews. Publicly readable.
 *
 * Key Security Decisions:
 * - Public Read: Both 'projects' and 'reviews' are publicly readable to facilitate easy data access during prototyping.
 * - Owner-Only Writes: 'reviews' are writable only with authentication enforced.
 * - No User Listing: Listing of users is not supported.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read project details, but requires authentication for creating, updating, or deleting them.
     * @path /databases/{database}/documents/projects/{projectId}
     * @allow (get, list): Any user can read project data.
     * @deny (create, update, delete): No one can write to the project collection through the client.
     * @principle Public read, no writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read reviews, but requires authentication to create them.
     * @path /databases/{database}/documents/reviews/{reviewId}
     * @allow (get, list): Any user can read review data.
     * @allow (create): Any authenticated user can create a review.
     * @deny (update, delete): No one can update or delete a review through the client.
     * @principle Public read, authenticated create.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }
  }
}