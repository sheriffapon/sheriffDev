/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and deferring
 * detailed data validation. It enforces authentication and basic ownership where applicable,
 * but largely trusts the client to provide valid data.  Data shape validation is omitted
 * to allow for flexible schema changes during early development.
 *
 * Data Structure:
 * - /projects/{projectId}: Stores project data.
 * - /reviews/{reviewId}: Stores user reviews.
 *
 * Key Security Decisions:
 * - Reviews: Allow public read, but only authenticated users can create them.
 * - No user listing: Listing all users is disallowed for privacy.
 * - Relaxed data validation: Data types and required fields are not strictly enforced.
 *
 * WARNING: This ruleset is intended for PROTOTYPING only and should be
 *          modified to include comprehensive data validation and more granular
 *          access control before being deployed to a production environment.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants public read access and authenticated-user-only create access to reviews.
     * @path /reviews/{reviewId}
     * @allow (get, list): Any user can read reviews.
     * @allow (create): Authenticated user can create reviews.
     * @deny (update, delete): No one can update or delete reviews.
     * @principle Public read, authenticated-user-only create.
     */
    match /reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Grants public read access to projects.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read project details.
     * @deny (create, update, delete): No one can create, update, or delete projects.
     * @principle Public read-only access.
     */
    match /projects/{projectId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    // ---------- Helper functions ----------
    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the requested user ID.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the requested user ID and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user ID matches and resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data != null;
    }
  }
}